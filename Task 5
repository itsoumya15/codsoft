import java.io.*;
import java.util.*;

class Student implements Serializable {
    String name;
    int rollNumber;
    String grade;

    public Student(String name, int rollNumber, String grade) {
        this.name = name;
        this.rollNumber = rollNumber;
        this.grade = grade;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Roll No: " + rollNumber + ", Grade: " + grade;
    }
}

public class StudentManagementSystem {
    private static final String FILE_NAME = "students.dat";
    private static List<Student> studentList = new ArrayList<>();

    public static void main(String[] args) {
        loadStudentsFromFile();
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nWelcome to the Student Management System");
            System.out.println("1. Add Student");
            System.out.println("2. Remove Student");
            System.out.println("3. Edit Student");
            System.out.println("4. Search Student");
            System.out.println("5. Display All Students");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();
            sc.nextLine();  // consume newline

            switch (choice) {
                case 1 -> addStudent(sc);
                case 2 -> removeStudent(sc);
                case 3 -> editStudent(sc);
                case 4 -> searchStudent(sc);
                case 5 -> displayAllStudents();
                case 6 -> saveStudentsToFile();
                default -> System.out.println("Invalid choice. Try again.");
            }

        } while (choice != 6);
    }

    private static void addStudent(Scanner sc) {
        System.out.print("Enter student name: ");
        String name = sc.nextLine().trim();
        System.out.print("Enter roll number: ");
        int rollNumber = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter grade: ");
        String grade = sc.nextLine().trim();

        if (name.isEmpty() || grade.isEmpty()) {
            System.out.println("Invalid input. Name and grade cannot be empty.");
            return;
        }

        studentList.add(new Student(name, rollNumber, grade));
        System.out.println("Student added successfully!");
    }

    private static void removeStudent(Scanner sc) {
        System.out.print("Enter roll number to remove: ");
        int roll = sc.nextInt();
        sc.nextLine();

        boolean removed = studentList.removeIf(s -> s.rollNumber == roll);
        System.out.println(removed ? "Student removed!" : "Student not found.");
    }

    private static void editStudent(Scanner sc) {
        System.out.print("Enter roll number to edit: ");
        int roll = sc.nextInt();
        sc.nextLine();

        for (Student s : studentList) {
            if (s.rollNumber == roll) {
                System.out.print("Enter new name: ");
                s.name = sc.nextLine().trim();
                System.out.print("Enter new grade: ");
                s.grade = sc.nextLine().trim();
                System.out.println("Student details updated.");
                return;
            }
        }
        System.out.println("Student not found.");
    }

    private static void searchStudent(Scanner sc) {
        System.out.print("Enter roll number to search: ");
        int roll = sc.nextInt();
        sc.nextLine();

        for (Student s : studentList) {
            if (s.rollNumber == roll) {
                System.out.println("Student Found: " + s);
                return;
            }
        }
        System.out.println("Student not found.");
    }

    private static void displayAllStudents() {
        if (studentList.isEmpty()) {
            System.out.println("No student records found.");
        } else {
            System.out.println("All Students:");
            for (Student s : studentList) {
                System.out.println(s);
            }
        }
    }

    private static void saveStudentsToFile() {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            out.writeObject(studentList);
            System.out.println("Data saved to file.");
        } catch (IOException e) {
            System.out.println("Failed to save data: " + e.getMessage());
        }
    }

    private static void loadStudentsFromFile() {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            studentList = (List<Student>) in.readObject();
        } catch (Exception e) {
            studentList = new ArrayList<>();
        }
    }
}
